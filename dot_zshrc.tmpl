
### Added by Zinit's installer
if [[ ! -f $HOME/.local/share/zinit/zinit.git/zinit.zsh ]]; then
  print -P "%F{33} %F{220}Installing %F{33}ZDHARMA-CONTINUUM%F{220} Initiative Plugin Manager (%F{33}zdharma-continuum/zinit%F{220})…%f"
  command mkdir -p "$HOME/.local/share/zinit" && command chmod g-rwX "$HOME/.local/share/zinit"
  command git clone https://github.com/zdharma-continuum/zinit "$HOME/.local/share/zinit/zinit.git" && \
    print -P "%F{33} %F{34}Installation successful.%f%b" || \
    print -P "%F{160} The clone has failed.%f%b"
fi

source "$HOME/.local/share/zinit/zinit.git/zinit.zsh"
autoload -Uz _zinit
(( ${+_comps} )) && _comps[zinit]=_zinit

# Load a few important annexes, without Turbo
# (this is currently required for annexes)
zinit light-mode for \
  zdharma-continuum/zinit-annex-as-monitor \
  zdharma-continuum/zinit-annex-bin-gem-node \
  zdharma-continuum/zinit-annex-patch-dl \
  zdharma-continuum/zinit-annex-rust

### End of Zinit's installer chunk

### zinit custom start

# 迁移 oh-my-zsh lib 相当于oh-my-zsh 默认加载的插件
# lib 目录: https://github.com/ohmyzsh/ohmyzsh/tree/master/lib
zi snippet OMZL::clipboard.zsh
# zi snippet OMZL::termsupport.zsh
# zi snippet OMZL::history.zsh
# zi snippet OMZL::key-bindings.zsh
# zi snippet OMZL::completion.zsh
zi snippet OMZL::git.zsh

# Load starship theme
# `starship` binary as command, from github release
zinit ice as"command" from"gh-r" \
  atclone"./starship init zsh > init.zsh; ./starship completions zsh > _starship" \
  atpull"%atclone" src"init.zsh"
zinit light starship/starship
# eval "$(starship init zsh)"

# install and enable fzf
zi for \
  as'command' \
  dl="$(print -c https://raw.githubusercontent.com/junegunn/fzf/master/{shell/{'key-bindings.zsh;','completion.zsh -> _fzf;'},man/{'man1/fzf.1 -> $ZPFX/share/man/man1/fzf.1;','man1/fzf-tmux.1 -> $ZPFX/share/man/man1/fzf-tmux.1;'}})" \
  from'gh-r' \
  null \
  pick'fzf' \
  src'key-bindings.zsh' \
@junegunn/fzf

# install oh my tmux, ~/.tmux.conf.local 会通过 chezmoi 创建
zi for \
  as"null" \
  from'github' \
  atclone'ln -s -f $PWD/.tmux.conf ~/.tmux.conf' \
@gpakosz/.tmux

# install exa
# mac 的 arm cpu 下仍然需要使用 brew 手动安装 exa
zinit ice as"command" from"gh-r" \
  atclone"cp -vf ./man/exa.1 $ZPFX/share/man/man1; cp -vf completions/exa.zsh _exa" \
  atpull"%atclone" pick"bin/exa"
zi light ogham/exa

# 像 ls 一样使用 exa, https://github.com/weineel/zsh-exa
# zi ice has"exa" atinit"AUTOCD=1" # 启用 AUTOCD 不知道其作用,暂不开启
zi light weineel/zsh-exa

# NOTE: fzf-tab needs to be loaded after compinit, but before plugins which will wrap widgets, such as zsh-autosuggestions or fast-syntax-highlighting!!
zinit light Aloxaf/fzf-tab
zinit light zsh-users/zsh-autosuggestions
zinit light zdharma-continuum/fast-syntax-highlighting

# 命令行输入使用 vi/vim 模式
zinit ice depth=1
zinit light jeffreytse/zsh-vi-mode
ZVM_VI_INSERT_ESCAPE_BINDKEY=jj

# 使用 zsh-z 而不是 autojump
zinit light agkozak/zsh-z

# docker 简写: https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/docker
# zi ice as"completion"
# zi snippet OMZP::docker/_docker

# oh-my-zsh 插件
zi snippet OMZP::git

# zsh-history-substring-search - https://github.com/zsh-users/zsh-history-substring-search
zinit wait lucid atload"bindkey '^[[A' history-substring-search-up;
  bindkey '^[[B' history-substring-search-down;
  bindkey '^P' history-substring-search-up;
  bindkey '^N' history-substring-search-down" for \
  zsh-users/zsh-history-substring-search

# 自定义, 维护在 github https://github.com/weineel/zsh-weineel
zinit light weineel/zsh-weineel

### zinit custom end

# https://github.com/zdharma-continuum/zinit#completions-2
autoload -Uz compinit
compinit
zinit cdreplay -q

##
### custom
##

export PATH=~/.local/bin:$PATH

# nvm
# export NVM_DIR="$HOME/.nvm"
# [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
# [ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion

# nvm node 镜像源
# export NVM_NODEJS_ORG_MIRROR=https://mirrors.ustc.edu.cn/node/

# n node 版本管理工具的镜像源
# export NODE_MIRROR=https://mirrors.ustc.edu.cn/node/
# export NODE_MIRROR=https://mirrors.tuna.tsinghua.edu.cn/nodejs-release/

# pipenv
export PIPENV_VENV_IN_PROJECT=1

# pnpm
export PNPM_HOME="/Users/lijufeng/Library/pnpm"
export PATH="$PNPM_HOME:$PATH"
# pnpm end

# rust
export RUSTUP_DIST_SERVER="https://rsproxy.cn"
export RUSTUP_UPDATE_ROOT="https://rsproxy.cn/rustup"
# rust end

# 命令历史的条数
HISTFILE=~/.zsh_history #记录历史命令的文件
HISTSIZE=1000000
# 会保存到历史文件中的命令条数
SAVEHIST=1000000
setopt appendhistory

# zellij is an alternative to tmux. https://github.com/zellij-org/zellij
# zellij setup --generate-completion zsh > "$ZINIT[COMPLETIONS_DIR]/_zellij"
# function open_zellij_session {
  # sed 命令是为了去除 zellij ls 输出中的特殊字符（用于标识标准输出的字体颜色等）
  # xargs 规范化参数，去除前后的空白符等
  # cut 类似 spilt 函数
#   zellij attach "$(zellij ls | sed "s,\x1B\[[0-9;]*[a-zA-Z],,g" | fzf | cut -d ' ' -f 1 | xargs)"
# }

###
# 不同主机类型（或使用场景的配置）
###
{{- if eq .hosttag "ps" }}

# inno-lane, 这种简单处理，会导致 shell 启动变慢
eval "$(_INNO_LANE_COMPLETE=zsh_source inno-lane)"
zinit snippet /Users/lijufeng/project/patsnap/inno-lane/zsh-plugin/zsh-inno-lane.plugin.zsh

{{- end }}

###
# 不同操作系统的配置
###

{{- if (and (kindIs "invalid" .chezmoi.osRelease) (eq .chezmoi.osRelease.id "ubuntu")) }}
# Ubuntu 暂时使用 vim，因为 nvim 暂时不方便安装 0.8 以上版本
export EDITOR="vim"
ZVM_VI_EDITOR="vim" # zsh-vi-mode 插件, vv 使用的编辑器改为 vim
{{- else }}
# 使用 neovim
export EDITOR="nvim"
alias vim="nvim"
ZVM_VI_EDITOR="nvim" # zsh-vi-mode 插件, vv 使用的编辑器改为 nvim
{{- end }}

{{- if eq .chezmoi.os "darwin" }}

# darwin (macOS)

# brew 镜像
export HOMEBREW_CORE_GIT_REMOTE="https://mirrors.ustc.edu.cn/homebrew-core.git"
export HOMEBREW_BREW_GIT_REMOTE="https://mirrors.ustc.edu.cn/brew.git"
export HOMEBREW_BOTTLE_DOMAIN="https://mirrors.ustc.edu.cn/homebrew-bottles"

{{- else if eq .chezmoi.os "linux" }}
# linux

{{- else }}
# other operating system

{{- end }}
